/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.integration;

import supernova.learningportal.dto.ReceiveCertificateHistoryRequest;
import supernova.learningportal.dto.RequestCertificateIssueRequest;
import supernova.learningportal.dto.SendCompletionRecordRequest;
import supernova.learningportal.dto.SyncExternalCourseRequest;
import supernova.learningportal.dto.SyncMemberInfoRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Integration Management", description = "the Integration Management API")
public interface IntegrationManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /integration/certificates/history : 수료증 발급 이력 수신
     *
     * @param receiveCertificateHistoryRequest  (required)
     * @return 이력 수신 완료 (status code 200)
     */
    @Operation(
        operationId = "receiveCertificateHistory",
        summary = "수료증 발급 이력 수신",
        tags = { "Integration Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "이력 수신 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/integration/certificates/history",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> receiveCertificateHistory(
        @Parameter(name = "ReceiveCertificateHistoryRequest", description = "", required = true) @Valid @RequestBody ReceiveCertificateHistoryRequest receiveCertificateHistoryRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /integration/certificates/request : 수료증 신청 연계
     *
     * @param requestCertificateIssueRequest  (required)
     * @return 신청 완료 (status code 200)
     */
    @Operation(
        operationId = "requestCertificateIssue",
        summary = "수료증 신청 연계",
        tags = { "Integration Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "신청 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/integration/certificates/request",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> requestCertificateIssue(
        @Parameter(name = "RequestCertificateIssueRequest", description = "", required = true) @Valid @RequestBody RequestCertificateIssueRequest requestCertificateIssueRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /integration/completions : 교육수료 정보 외부 전송
     *
     * @param sendCompletionRecordRequest  (required)
     * @return 전송 성공 (status code 200)
     */
    @Operation(
        operationId = "sendCompletionRecord",
        summary = "교육수료 정보 외부 전송",
        tags = { "Integration Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "전송 성공")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/integration/completions",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> sendCompletionRecord(
        @Parameter(name = "SendCompletionRecordRequest", description = "", required = true) @Valid @RequestBody SendCompletionRecordRequest sendCompletionRecordRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /integration/courses/sync : 외부 교육과정 정보 연계
     *
     * @param syncExternalCourseRequest  (required)
     * @return 연계 성공 (status code 200)
     */
    @Operation(
        operationId = "syncExternalCourse",
        summary = "외부 교육과정 정보 연계",
        tags = { "Integration Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "연계 성공")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/integration/courses/sync",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> syncExternalCourse(
        @Parameter(name = "SyncExternalCourseRequest", description = "", required = true) @Valid @RequestBody SyncExternalCourseRequest syncExternalCourseRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /integration/members/sync : 통합회원 정보 연계 동기화
     *
     * @param syncMemberInfoRequest  (required)
     * @return 연계 성공 (status code 200)
     */
    @Operation(
        operationId = "syncMemberInfo",
        summary = "통합회원 정보 연계 동기화",
        tags = { "Integration Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "연계 성공")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/integration/members/sync",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> syncMemberInfo(
        @Parameter(name = "SyncMemberInfoRequest", description = "", required = true) @Valid @RequestBody SyncMemberInfoRequest syncMemberInfoRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
