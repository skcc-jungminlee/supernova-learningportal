/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.common;

import supernova.learningportal.dto.CommonCode;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;
import supernova.learningportal.dto.PermissionApproval;
import supernova.learningportal.dto.PermissionRequest;
import supernova.learningportal.dto.SmsRequest;
import supernova.learningportal.dto.UiElement;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Common Management", description = "the Common Management API")
public interface CommonManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /codes : 공통 코드 등록
     *
     * @param commonCode  (required)
     * @return 공통 코드 등록 완료 (status code 200)
     */
    @Operation(
        operationId = "createCode",
        summary = "공통 코드 등록",
        tags = { "Common Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "공통 코드 등록 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/codes",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createCode(
        @Parameter(name = "CommonCode", description = "", required = true) @Valid @RequestBody CommonCode commonCode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /codes/{id} : 공통 코드 삭제
     *
     * @param id 코드 ID (required)
     * @return 공통 코드 삭제 완료 (status code 200)
     */
    @Operation(
        operationId = "deleteCode",
        summary = "공통 코드 삭제",
        tags = { "Common Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "공통 코드 삭제 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/codes/{id}"
    )
    
    default ResponseEntity<Void> deleteCode(
        @Parameter(name = "id", description = "코드 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /notifications/sms/history : SMS 발송 이력 조회
     *
     * @param phoneNumber 수신자 전화번호 (optional)
     * @param date 발송 일자 (optional)
     * @return SMS 발송 이력 반환 (status code 200)
     */
    @Operation(
        operationId = "getSmsHistory",
        summary = "SMS 발송 이력 조회",
        tags = { "Common Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SMS 발송 이력 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/notifications/sms/history"
    )
    
    default ResponseEntity<Void> getSmsHistory(
        @Parameter(name = "phoneNumber", description = "수신자 전화번호", in = ParameterIn.QUERY) @Valid @RequestParam(value = "phoneNumber", required = false) String phoneNumber,
        @Parameter(name = "date", description = "발송 일자", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /permissions/{id}/status : 권한 승인/반려 처리
     *
     * @param id 권한 요청 ID (required)
     * @param permissionApproval  (required)
     * @return 권한 상태 변경 완료 (status code 200)
     */
    @Operation(
        operationId = "processPermissionStatus",
        summary = "권한 승인/반려 처리",
        tags = { "Common Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "권한 상태 변경 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/permissions/{id}/status",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> processPermissionStatus(
        @Parameter(name = "id", description = "권한 요청 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "PermissionApproval", description = "", required = true) @Valid @RequestBody PermissionApproval permissionApproval
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /system-config/ui-elements : UI 요소(메뉴/팝업/약관) 등록
     *
     * @param uiElement  (required)
     * @return UI 요소 등록 완료 (status code 200)
     */
    @Operation(
        operationId = "registerUiElement",
        summary = "UI 요소(메뉴/팝업/약관) 등록",
        tags = { "Common Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "UI 요소 등록 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/system-config/ui-elements",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> registerUiElement(
        @Parameter(name = "UiElement", description = "", required = true) @Valid @RequestBody UiElement uiElement
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /permissions : 권한 설정 요청
     *
     * @param permissionRequest  (required)
     * @return 권한 설정 요청 완료 (status code 200)
     */
    @Operation(
        operationId = "requestPermission",
        summary = "권한 설정 요청",
        tags = { "Common Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "권한 설정 요청 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/permissions",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> requestPermission(
        @Parameter(name = "PermissionRequest", description = "", required = true) @Valid @RequestBody PermissionRequest permissionRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /notifications/sms : SMS 발송 요청
     *
     * @param smsRequest  (required)
     * @return SMS 발송 요청 완료 (status code 200)
     */
    @Operation(
        operationId = "sendSms",
        summary = "SMS 발송 요청",
        tags = { "Common Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SMS 발송 요청 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/notifications/sms",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> sendSms(
        @Parameter(name = "SmsRequest", description = "", required = true) @Valid @RequestBody SmsRequest smsRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /codes/{id} : 공통 코드 수정
     *
     * @param id 코드 ID (required)
     * @param commonCode  (required)
     * @return 공통 코드 수정 완료 (status code 200)
     */
    @Operation(
        operationId = "updateCode",
        summary = "공통 코드 수정",
        tags = { "Common Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "공통 코드 수정 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/codes/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateCode(
        @Parameter(name = "id", description = "코드 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "CommonCode", description = "", required = true) @Valid @RequestBody CommonCode commonCode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
