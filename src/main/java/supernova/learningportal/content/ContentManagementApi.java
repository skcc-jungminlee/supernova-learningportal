/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.content;

import supernova.learningportal.dto.ContentCategories;
import supernova.learningportal.dto.ContentReview;
import supernova.learningportal.dto.DesiredContentRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Content Management", description = "the Content Management API")
public interface ContentManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /contents/{id}/modification-request : 콘텐츠 수정 요청
     *
     * @param id 콘텐츠 ID (required)
     * @param reason  (required)
     * @param file  (optional)
     * @return 콘텐츠 수정 요청 등록 완료 (status code 200)
     */
    @Operation(
        operationId = "requestContentModification",
        summary = "콘텐츠 수정 요청",
        tags = { "Content Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "콘텐츠 수정 요청 등록 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/contents/{id}/modification-request",
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Void> requestContentModification(
        @Parameter(name = "id", description = "콘텐츠 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "reason", description = "", required = true) @Valid @RequestParam(value = "reason", required = true) String reason,
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /contents/request : 희망 콘텐츠 신청
     *
     * @param desiredContentRequest  (required)
     * @return 희망 콘텐츠 신청 완료 (status code 200)
     */
    @Operation(
        operationId = "requestDesiredContent",
        summary = "희망 콘텐츠 신청",
        tags = { "Content Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "희망 콘텐츠 신청 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/contents/request",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> requestDesiredContent(
        @Parameter(name = "DesiredContentRequest", description = "", required = true) @Valid @RequestBody DesiredContentRequest desiredContentRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /contents/{id}/review : 콘텐츠 검수 처리
     *
     * @param id 콘텐츠 ID (required)
     * @param contentReview  (required)
     * @return 콘텐츠 검수 완료 (status code 200)
     */
    @Operation(
        operationId = "reviewContent",
        summary = "콘텐츠 검수 처리",
        tags = { "Content Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "콘텐츠 검수 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/contents/{id}/review",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> reviewContent(
        @Parameter(name = "id", description = "콘텐츠 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ContentReview", description = "", required = true) @Valid @RequestBody ContentReview contentReview
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /contents/{id}/categories : 콘텐츠 분류 설정
     *
     * @param id 콘텐츠 ID (required)
     * @param contentCategories  (required)
     * @return 콘텐츠 분류 설정 완료 (status code 200)
     */
    @Operation(
        operationId = "setContentCategories",
        summary = "콘텐츠 분류 설정",
        tags = { "Content Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "콘텐츠 분류 설정 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/contents/{id}/categories",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> setContentCategories(
        @Parameter(name = "id", description = "콘텐츠 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ContentCategories", description = "", required = true) @Valid @RequestBody ContentCategories contentCategories
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /contents : 콘텐츠 업로드
     *
     * @param file  (required)
     * @param title  (required)
     * @param description  (optional)
     * @param version  (optional)
     * @return 콘텐츠 업로드 완료 (status code 200)
     */
    @Operation(
        operationId = "uploadContent",
        summary = "콘텐츠 업로드",
        tags = { "Content Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "콘텐츠 업로드 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/contents",
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Void> uploadContent(
        @Parameter(name = "file", description = "", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "title", description = "", required = true) @Valid @RequestParam(value = "title", required = true) String title,
        @Parameter(name = "description", description = "") @Valid @RequestParam(value = "description", required = false) String description,
        @Parameter(name = "version", description = "") @Valid @RequestParam(value = "version", required = false) String version
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
