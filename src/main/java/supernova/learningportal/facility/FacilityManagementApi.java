/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.facility;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;
import supernova.learningportal.dto.ReservationRequest;
import supernova.learningportal.dto.ReservationStatusUpdate;
import supernova.learningportal.dto.RoomInfo;
import supernova.learningportal.dto.RoomUsageInfo;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Facility Management", description = "the Facility Management API")
public interface FacilityManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /reservations : 대관 신청 등록
     *
     * @param reservationRequest  (required)
     * @return 대관 신청이 성공적으로 등록됨 (status code 200)
     */
    @Operation(
        operationId = "createReservation",
        summary = "대관 신청 등록",
        tags = { "Facility Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "대관 신청이 성공적으로 등록됨")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/reservations",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createReservation(
        @Parameter(name = "ReservationRequest", description = "", required = true) @Valid @RequestBody ReservationRequest reservationRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reservations/status : 대관 이용현황 조회
     *
     * @param date 조회 기준 날짜 (optional)
     * @param roomId 강의실 ID (optional)
     * @param status 예약 상태 필터 (optional)
     * @return 대관 이용현황 반환 (status code 200)
     */
    @Operation(
        operationId = "getReservationStatus",
        summary = "대관 이용현황 조회",
        tags = { "Facility Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "대관 이용현황 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reservations/status"
    )
    
    default ResponseEntity<Void> getReservationStatus(
        @Parameter(name = "date", description = "조회 기준 날짜", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
        @Parameter(name = "roomId", description = "강의실 ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "roomId", required = false) String roomId,
        @Parameter(name = "status", description = "예약 상태 필터", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rooms/{id}/location : 강의실 위치 정보 제공
     *
     * @param id 강의실 ID (required)
     * @return 강의실 위치 정보 반환 (status code 200)
     */
    @Operation(
        operationId = "getRoomLocation",
        summary = "강의실 위치 정보 제공",
        tags = { "Facility Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "강의실 위치 정보 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rooms/{id}/location"
    )
    
    default ResponseEntity<Void> getRoomLocation(
        @Parameter(name = "id", description = "강의실 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /reservations/{id}/status : 대관 예약 승인 또는 반려 처리
     *
     * @param id 대관 예약 ID (required)
     * @param reservationStatusUpdate  (required)
     * @return 대관 상태 변경 완료 (status code 200)
     */
    @Operation(
        operationId = "processReservationStatus",
        summary = "대관 예약 승인 또는 반려 처리",
        tags = { "Facility Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "대관 상태 변경 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/reservations/{id}/status",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> processReservationStatus(
        @Parameter(name = "id", description = "대관 예약 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ReservationStatusUpdate", description = "", required = true) @Valid @RequestBody ReservationStatusUpdate reservationStatusUpdate
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rooms : 강의실 정보 등록
     *
     * @param roomInfo  (required)
     * @return 강의실 등록 완료 (status code 200)
     */
    @Operation(
        operationId = "registerRoom",
        summary = "강의실 정보 등록",
        tags = { "Facility Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "강의실 등록 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rooms",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> registerRoom(
        @Parameter(name = "RoomInfo", description = "", required = true) @Valid @RequestBody RoomInfo roomInfo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rooms/{id}/usage-info : 강의실 이용안내 설정
     *
     * @param id 강의실 ID (required)
     * @param roomUsageInfo  (required)
     * @return 강의실 이용안내 설정 완료 (status code 200)
     */
    @Operation(
        operationId = "setRoomUsageInfo",
        summary = "강의실 이용안내 설정",
        tags = { "Facility Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "강의실 이용안내 설정 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rooms/{id}/usage-info",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> setRoomUsageInfo(
        @Parameter(name = "id", description = "강의실 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "RoomUsageInfo", description = "", required = true) @Valid @RequestBody RoomUsageInfo roomUsageInfo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
