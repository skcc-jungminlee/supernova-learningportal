/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.portal;

import supernova.learningportal.dto.Faq;
import supernova.learningportal.dto.InstructorApplication;
import supernova.learningportal.dto.InstructorApproval;
import supernova.learningportal.dto.Notice;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Portal Management", description = "the Portal Management API")
public interface PortalManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /instructors/apply : 강사 등록 신청
     *
     * @param instructorApplication  (required)
     * @return 강사 등록 신청 완료 (status code 200)
     */
    @Operation(
        operationId = "applyInstructor",
        summary = "강사 등록 신청",
        tags = { "Portal Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "강사 등록 신청 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/instructors/apply",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> applyInstructor(
        @Parameter(name = "InstructorApplication", description = "", required = true) @Valid @RequestBody InstructorApplication instructorApplication
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /faqs : FAQ 등록
     *
     * @param faq  (required)
     * @return FAQ 등록 완료 (status code 200)
     */
    @Operation(
        operationId = "createFaq",
        summary = "FAQ 등록",
        tags = { "Portal Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "FAQ 등록 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/faqs",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createFaq(
        @Parameter(name = "Faq", description = "", required = true) @Valid @RequestBody Faq faq
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /notices : 공지사항 등록
     *
     * @param notice  (required)
     * @return 공지사항 등록 완료 (status code 200)
     */
    @Operation(
        operationId = "createNotice",
        summary = "공지사항 등록",
        tags = { "Portal Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "공지사항 등록 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/notices",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createNotice(
        @Parameter(name = "Notice", description = "", required = true) @Valid @RequestBody Notice notice
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /instructors/{id}/history : 강사 강의 이력 조회
     *
     * @param id 강사 ID (required)
     * @return 강사 강의 이력 반환 (status code 200)
     */
    @Operation(
        operationId = "getInstructorHistory",
        summary = "강사 강의 이력 조회",
        tags = { "Portal Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "강사 강의 이력 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/instructors/{id}/history"
    )
    
    default ResponseEntity<Void> getInstructorHistory(
        @Parameter(name = "id", description = "강사 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /mypage : 마이페이지 조회
     *
     * @param userId 사용자 ID (required)
     * @return 마이페이지 정보 반환 (status code 200)
     */
    @Operation(
        operationId = "getMyPage",
        summary = "마이페이지 조회",
        tags = { "Portal Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "마이페이지 정보 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/mypage"
    )
    
    default ResponseEntity<Void> getMyPage(
        @NotNull @Parameter(name = "userId", description = "사용자 ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /faqs : FAQ 목록 조회
     *
     * @param keyword 검색 키워드 (optional)
     * @return FAQ 목록 반환 (status code 200)
     */
    @Operation(
        operationId = "listFaqs",
        summary = "FAQ 목록 조회",
        tags = { "Portal Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "FAQ 목록 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/faqs"
    )
    
    default ResponseEntity<Void> listFaqs(
        @Parameter(name = "keyword", description = "검색 키워드", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyword", required = false) String keyword
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /notices : 공지사항 목록 조회
     *
     * @param keyword 검색 키워드 (optional)
     * @return 공지사항 목록 반환 (status code 200)
     */
    @Operation(
        operationId = "listNotices",
        summary = "공지사항 목록 조회",
        tags = { "Portal Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "공지사항 목록 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/notices"
    )
    
    default ResponseEntity<Void> listNotices(
        @Parameter(name = "keyword", description = "검색 키워드", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyword", required = false) String keyword
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /instructors/applications/{id}/status : 강사 승인 또는 반려 처리
     *
     * @param id 강사 신청 ID (required)
     * @param instructorApproval  (required)
     * @return 강사 신청 상태 변경 완료 (status code 200)
     */
    @Operation(
        operationId = "updateInstructorApplicationStatus",
        summary = "강사 승인 또는 반려 처리",
        tags = { "Portal Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "강사 신청 상태 변경 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/instructors/applications/{id}/status",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateInstructorApplicationStatus(
        @Parameter(name = "id", description = "강사 신청 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "InstructorApproval", description = "", required = true) @Valid @RequestBody InstructorApproval instructorApproval
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
