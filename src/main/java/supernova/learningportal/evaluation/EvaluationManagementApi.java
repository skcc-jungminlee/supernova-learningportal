/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.evaluation;

import supernova.learningportal.dto.ExamDefinition;
import supernova.learningportal.dto.ExamSubmission;
import supernova.learningportal.dto.SurveyDefinition;
import supernova.learningportal.dto.SurveyResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Evaluation Management", description = "the Evaluation Management API")
public interface EvaluationManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /exams/{id}/autograde : 시험 자동 채점
     *
     * @param id 시험 ID (required)
     * @return 자동 채점 결과 반환 (status code 200)
     */
    @Operation(
        operationId = "autoGradeExam",
        summary = "시험 자동 채점",
        tags = { "Evaluation Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "자동 채점 결과 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/exams/{id}/autograde"
    )
    
    default ResponseEntity<Void> autoGradeExam(
        @Parameter(name = "id", description = "시험 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /exams : 시험 출제
     *
     * @param examDefinition  (required)
     * @return 시험 출제 완료 (status code 200)
     */
    @Operation(
        operationId = "createExam",
        summary = "시험 출제",
        tags = { "Evaluation Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "시험 출제 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/exams",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createExam(
        @Parameter(name = "ExamDefinition", description = "", required = true) @Valid @RequestBody ExamDefinition examDefinition
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /surveys : 설문 등록
     *
     * @param surveyDefinition  (required)
     * @return 설문 등록 완료 (status code 200)
     */
    @Operation(
        operationId = "createSurvey",
        summary = "설문 등록",
        tags = { "Evaluation Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "설문 등록 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/surveys",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createSurvey(
        @Parameter(name = "SurveyDefinition", description = "", required = true) @Valid @RequestBody SurveyDefinition surveyDefinition
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /exams/statistics : 시험 통계 조회
     *
     * @param examId 시험 ID (required)
     * @return 시험 통계 데이터 반환 (status code 200)
     */
    @Operation(
        operationId = "getExamStatistics",
        summary = "시험 통계 조회",
        tags = { "Evaluation Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "시험 통계 데이터 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/exams/statistics"
    )
    
    default ResponseEntity<Void> getExamStatistics(
        @NotNull @Parameter(name = "examId", description = "시험 ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "examId", required = true) String examId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /exams/{id}/submit : 시험 응시 제출
     *
     * @param id 시험 ID (required)
     * @param examSubmission  (required)
     * @return 시험 응시 제출 완료 (status code 200)
     */
    @Operation(
        operationId = "submitExam",
        summary = "시험 응시 제출",
        tags = { "Evaluation Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "시험 응시 제출 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/exams/{id}/submit",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> submitExam(
        @Parameter(name = "id", description = "시험 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ExamSubmission", description = "", required = true) @Valid @RequestBody ExamSubmission examSubmission
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /surveys/{id}/responses : 설문 응답 제출
     *
     * @param id 설문 ID (required)
     * @param surveyResponse  (required)
     * @return 설문 응답 제출 완료 (status code 200)
     */
    @Operation(
        operationId = "submitSurveyResponse",
        summary = "설문 응답 제출",
        tags = { "Evaluation Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "설문 응답 제출 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/surveys/{id}/responses",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> submitSurveyResponse(
        @Parameter(name = "id", description = "설문 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "SurveyResponse", description = "", required = true) @Valid @RequestBody SurveyResponse surveyResponse
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
