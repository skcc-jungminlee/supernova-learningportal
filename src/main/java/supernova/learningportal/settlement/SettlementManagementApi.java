/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.settlement;

import supernova.learningportal.dto.EnrollmentPayment;
import supernova.learningportal.dto.InstructorSettlement;
import supernova.learningportal.dto.RefundRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Settlement Management", description = "the Settlement Management API")
public interface SettlementManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /payments/enrollments : 수강신청 결제 처리
     *
     * @param enrollmentPayment  (required)
     * @return 결제 처리 완료 (status code 200)
     */
    @Operation(
        operationId = "processEnrollmentPayment",
        summary = "수강신청 결제 처리",
        tags = { "Settlement Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "결제 처리 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/enrollments",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> processEnrollmentPayment(
        @Parameter(name = "EnrollmentPayment", description = "", required = true) @Valid @RequestBody EnrollmentPayment enrollmentPayment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /settlements/instructors : 강사비 정산 등록
     *
     * @param instructorSettlement  (required)
     * @return 강사비 정산 등록 완료 (status code 200)
     */
    @Operation(
        operationId = "registerInstructorSettlement",
        summary = "강사비 정산 등록",
        tags = { "Settlement Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "강사비 정산 등록 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/settlements/instructors",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> registerInstructorSettlement(
        @Parameter(name = "InstructorSettlement", description = "", required = true) @Valid @RequestBody InstructorSettlement instructorSettlement
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/enrollments/{id}/refund : 수강신청 환불 요청 및 처리
     *
     * @param id 수강신청 ID (required)
     * @param refundRequest  (required)
     * @return 환불 요청 및 처리 완료 (status code 200)
     */
    @Operation(
        operationId = "requestEnrollmentRefund",
        summary = "수강신청 환불 요청 및 처리",
        tags = { "Settlement Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "환불 요청 및 처리 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/enrollments/{id}/refund",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> requestEnrollmentRefund(
        @Parameter(name = "id", description = "수강신청 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "RefundRequest", description = "", required = true) @Valid @RequestBody RefundRequest refundRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
