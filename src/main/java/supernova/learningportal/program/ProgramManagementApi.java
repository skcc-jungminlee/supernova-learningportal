/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.program;

import org.springframework.format.annotation.DateTimeFormat;
import supernova.learningportal.dto.DeactivateProgramRequest;
import supernova.learningportal.dto.InstructorAssignment;
import java.time.LocalDate;
import supernova.learningportal.dto.MixedModeSettings;
import supernova.learningportal.dto.Program;
import supernova.learningportal.dto.ProgramSchedule;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Program Management", description = "the Program Management API")
public interface ProgramManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /instructors/assign : 강사 배정
     *
     * @param instructorAssignment  (required)
     * @return 강사 배정 완료 (status code 200)
     */
    @Operation(
        operationId = "assignInstructor",
        summary = "강사 배정",
        tags = { "Program Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "강사 배정 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/instructors/assign",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> assignInstructor(
        @Parameter(name = "InstructorAssignment", description = "", required = true) @Valid @RequestBody InstructorAssignment instructorAssignment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /programs : 교육 프로그램 등록
     *
     * @param program  (required)
     * @return 교육 프로그램 등록 완료 (status code 200)
     */
    @Operation(
        operationId = "createProgram",
        summary = "교육 프로그램 등록",
        tags = { "Program Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "교육 프로그램 등록 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/programs",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createProgram(
        @Parameter(name = "Program", description = "", required = true) @Valid @RequestBody Program program
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /programs/{id}/deactivate : 교육 프로그램 폐지 요청
     *
     * @param id 프로그램 ID (required)
     * @param deactivateProgramRequest  (required)
     * @return 폐지 처리 완료 (status code 200)
     */
    @Operation(
        operationId = "deactivateProgram",
        summary = "교육 프로그램 폐지 요청",
        tags = { "Program Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "폐지 처리 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/programs/{id}/deactivate",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> deactivateProgram(
        @Parameter(name = "id", description = "프로그램 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "DeactivateProgramRequest", description = "", required = true) @Valid @RequestBody DeactivateProgramRequest deactivateProgramRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /instructors/search : 강사 검색
     *
     * @param qualification  (optional)
     * @param field  (optional)
     * @param date  (optional)
     * @return 검색된 강사 목록 반환 (status code 200)
     */
    @Operation(
        operationId = "searchInstructors",
        summary = "강사 검색",
        tags = { "Program Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "검색된 강사 목록 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/instructors/search"
    )
    
    default ResponseEntity<Void> searchInstructors(
        @Parameter(name = "qualification", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "qualification", required = false) String qualification,
        @Parameter(name = "field", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "field", required = false) String field,
        @Parameter(name = "date", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /programs/{id}/mixed-mode : 혼합교육 운영 설정
     *
     * @param id 프로그램 ID (required)
     * @param mixedModeSettings  (required)
     * @return 혼합교육 설정 완료 (status code 200)
     */
    @Operation(
        operationId = "setMixedModeProgram",
        summary = "혼합교육 운영 설정",
        tags = { "Program Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "혼합교육 설정 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/programs/{id}/mixed-mode",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> setMixedModeProgram(
        @Parameter(name = "id", description = "프로그램 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "MixedModeSettings", description = "", required = true) @Valid @RequestBody MixedModeSettings mixedModeSettings
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /programs/{id}/schedule : 교육 프로그램 일정 설정
     *
     * @param id 프로그램 ID (required)
     * @param programSchedule  (required)
     * @return 일정 설정 완료 (status code 200)
     */
    @Operation(
        operationId = "setProgramSchedule",
        summary = "교육 프로그램 일정 설정",
        tags = { "Program Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "일정 설정 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/programs/{id}/schedule",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> setProgramSchedule(
        @Parameter(name = "id", description = "프로그램 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ProgramSchedule", description = "", required = true) @Valid @RequestBody ProgramSchedule programSchedule
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
