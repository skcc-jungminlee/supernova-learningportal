/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.member;

import supernova.learningportal.dto.AgreementInfo;
import supernova.learningportal.dto.BasicInfo;
import supernova.learningportal.dto.MemberProfile;
import supernova.learningportal.dto.VerificationRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Member Signup", description = "the Member Signup API")
public interface MemberSignupApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /members/profile/history : 회원정보 수정 이력 조회
     *
     * @param userId 회원 ID (required)
     * @return 회원정보 수정 이력 반환 (status code 200)
     */
    @Operation(
        operationId = "getMemberProfileHistory",
        summary = "회원정보 수정 이력 조회",
        tags = { "Member Signup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "회원정보 수정 이력 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/members/profile/history"
    )
    
    default ResponseEntity<Void> getMemberProfileHistory(
        @NotNull @Parameter(name = "userId", description = "회원 ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /members/signup/complete : 회원가입 완료 정보 조회
     *
     * @return 회원가입 완료 메시지 반환 (status code 200)
     */
    @Operation(
        operationId = "getSignupCompleteInfo",
        summary = "회원가입 완료 정보 조회",
        tags = { "Member Signup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "회원가입 완료 메시지 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/members/signup/complete"
    )
    
    default ResponseEntity<Void> getSignupCompleteInfo(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /members/signup/types : 회원유형 목록 조회
     *
     * @return 회원유형 목록 반환 (status code 200)
     */
    @Operation(
        operationId = "getSignupTypes",
        summary = "회원유형 목록 조회",
        tags = { "Member Signup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "회원유형 목록 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/members/signup/types"
    )
    
    default ResponseEntity<Void> getSignupTypes(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /members/signup/agreements : 약관 동의 저장
     *
     * @param agreementInfo  (required)
     * @return 약관 동의 저장 완료 (status code 200)
     */
    @Operation(
        operationId = "submitAgreements",
        summary = "약관 동의 저장",
        tags = { "Member Signup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "약관 동의 저장 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/members/signup/agreements",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> submitAgreements(
        @Parameter(name = "AgreementInfo", description = "", required = true) @Valid @RequestBody AgreementInfo agreementInfo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /members/signup/basic-info : 기본정보 입력
     *
     * @param basicInfo  (required)
     * @return 기본정보 저장 완료 (status code 200)
     */
    @Operation(
        operationId = "submitBasicInfo",
        summary = "기본정보 입력",
        tags = { "Member Signup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "기본정보 저장 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/members/signup/basic-info",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> submitBasicInfo(
        @Parameter(name = "BasicInfo", description = "", required = true) @Valid @RequestBody BasicInfo basicInfo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /members/profile : 회원정보 수정
     *
     * @param memberProfile  (required)
     * @return 회원정보 수정 성공 (status code 200)
     */
    @Operation(
        operationId = "updateMemberProfile",
        summary = "회원정보 수정",
        tags = { "Member Signup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "회원정보 수정 성공")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/members/profile",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateMemberProfile(
        @Parameter(name = "MemberProfile", description = "", required = true) @Valid @RequestBody MemberProfile memberProfile
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /members/signup/verification : 본인인증 요청
     *
     * @param verificationRequest  (required)
     * @return 본인인증 성공 또는 실패 (status code 200)
     */
    @Operation(
        operationId = "verifyIdentity",
        summary = "본인인증 요청",
        tags = { "Member Signup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "본인인증 성공 또는 실패")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/members/signup/verification",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> verifyIdentity(
        @Parameter(name = "VerificationRequest", description = "", required = true) @Valid @RequestBody VerificationRequest verificationRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
