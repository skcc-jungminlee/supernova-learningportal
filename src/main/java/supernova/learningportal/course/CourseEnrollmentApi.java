/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package supernova.learningportal.course;

import supernova.learningportal.dto.EnrollmentDraft;
import supernova.learningportal.dto.EnrollmentSubmit;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-22T18:55:32.815711100+09:00[Asia/Seoul]", comments = "Generator version: 7.11.0")
@Validated
@Controller
@Tag(name = "Course Enrollment", description = "the Course Enrollment API")
public interface CourseEnrollmentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /enrollments/{id}/cancel : 수강신청 취소 요청
     *
     * @param id 수강신청 ID (required)
     * @return 수강신청 취소 성공 (status code 200)
     */
    @Operation(
        operationId = "cancelEnrollment",
        summary = "수강신청 취소 요청",
        tags = { "Course Enrollment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "수강신청 취소 성공")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/enrollments/{id}/cancel"
    )
    
    default ResponseEntity<Void> cancelEnrollment(
        @Parameter(name = "id", description = "수강신청 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /certificates/download : 수료증 PDF 다운로드
     *
     * @param courseId 수료한 과정 ID (required)
     * @param userId 사용자 ID (required)
     * @return PDF 수료증 반환 (status code 200)
     */
    @Operation(
        operationId = "downloadCertificate",
        summary = "수료증 PDF 다운로드",
        tags = { "Course Enrollment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "PDF 수료증 반환", content = {
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/certificates/download",
        produces = { "application/pdf" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> downloadCertificate(
        @NotNull @Parameter(name = "courseId", description = "수료한 과정 ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "courseId", required = true) String courseId,
        @NotNull @Parameter(name = "userId", description = "사용자 ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /courses : 교육과정 목록 조회
     *
     * @return 성공적으로 교육과정 목록을 반환합니다. (status code 200)
     */
    @Operation(
        operationId = "getCourses",
        summary = "교육과정 목록 조회",
        tags = { "Course Enrollment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "성공적으로 교육과정 목록을 반환합니다.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/courses"
    )
    
    default ResponseEntity<Void> getCourses(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /enrollments/status : 수강신청 상태 확인
     *
     * @param userId 수강신청자 ID (required)
     * @return 수강신청 상태 목록 반환 (status code 200)
     */
    @Operation(
        operationId = "getEnrollmentStatus",
        summary = "수강신청 상태 확인",
        tags = { "Course Enrollment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "수강신청 상태 목록 반환")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/enrollments/status"
    )
    
    default ResponseEntity<Void> getEnrollmentStatus(
        @NotNull @Parameter(name = "userId", description = "수강신청자 ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /enrollments/draft : 수강신청서 임시 저장
     *
     * @param enrollmentDraft  (required)
     * @return 임시 저장 완료 (status code 200)
     */
    @Operation(
        operationId = "saveEnrollmentDraft",
        summary = "수강신청서 임시 저장",
        tags = { "Course Enrollment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "임시 저장 완료")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/enrollments/draft",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> saveEnrollmentDraft(
        @Parameter(name = "EnrollmentDraft", description = "", required = true) @Valid @RequestBody EnrollmentDraft enrollmentDraft
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /enrollments/submit : 수강신청서 최종 제출
     *
     * @param enrollmentSubmit  (required)
     * @return 수강신청이 성공적으로 제출됨 (status code 200)
     */
    @Operation(
        operationId = "submitEnrollment",
        summary = "수강신청서 최종 제출",
        tags = { "Course Enrollment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "수강신청이 성공적으로 제출됨")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/enrollments/submit",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> submitEnrollment(
        @Parameter(name = "EnrollmentSubmit", description = "", required = true) @Valid @RequestBody EnrollmentSubmit enrollmentSubmit
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
